import { VNode } from 'vue';
export interface OverlayProps {
    isOpen?: boolean;
}
export declare const defineOverlayContainer: <Props extends object>(name: string, defineCustomElement: () => void, componentProps?: string[], hasDelegateHost?: boolean, controller?: any) => import("vue").DefineComponent<Props & OverlayProps, object, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<Props & OverlayProps extends infer T ? T extends Props & OverlayProps ? T extends import("vue").ComponentPropsOptions<{
    [x: string]: unknown;
}> ? import("vue").ExtractPropTypes<T> : T : never : never>, import("vue").ExtractDefaultPropTypes<Props & OverlayProps>> | import("vue").DefineComponent<unknown, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<unknown>, {}>;
